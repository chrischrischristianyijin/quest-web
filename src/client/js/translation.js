/**
 * Translation system for Quest
 * Handles English/Chinese text switching
 */

class TranslationManager {
    constructor() {
        this.currentLanguage = localStorage.getItem('quest_language') || 'en';
        this.translations = {
            en: {
                // Navigation
                'demo_chat': 'Demo Chat',
                'language': 'EN',
                'my_space': 'My Space',
                'email_preferences': 'Email Preferences',
                'edit_profile': 'Edit Profile',
                'log_out': 'Log Out',
                
                // My Space specific
                'search_insights': 'Search insights‚Ä¶',
                'edit': 'Edit',
                'last_added': 'Last Added',
                'tags': 'Tags',
                'all_tags': 'All Tags',
                'project': 'Project',
                'area': 'Area',
                'resource': 'Resource',
                'archive': 'Archive',
                'latest': 'Latest',
                'oldest': 'Oldest',
                'alphabetical': 'Alphabetical',
                'new_stack': 'New Stack',
                'new_stack_description': 'A new stack for organizing content',
                'stack': 'STACK',
                'items': 'items',
                'insights': 'insights',
                'no_insights_yet': 'No insights yet',
                'stack_is_empty': 'This stack is empty. Add some insights to get started!',
                'add_insight': 'Add Insight',
                'back_to_my_space': 'Back to My Space',
                'no_content_collected': 'No content collected yet',
                'start_adding_content': 'Start adding your favorite media content to your collection',
                'add_content': 'Add Content',
                'created': 'Created',
                'modified': 'Modified',
                
                // Modal translations
                'add_new_content': 'Add New Content',
                'content_url': 'Content URL',
                'custom_title_optional': 'Custom Title (Optional)',
                'enter_custom_title_placeholder': 'Enter custom title or leave empty to use webpage title',
                'your_thoughts_optional': 'Your Thoughts (Optional)',
                'share_thoughts_placeholder': 'Share your thoughts, insights, or notes about this content',
                'tag_optional': 'Tag (Optional)',
                'select_tag_placeholder': 'Select a tag...',
                'cancel': 'Cancel',
                'add_content': 'Add Content',
                'add': 'Add',
                'welcome': 'Welcome',
                'welcome_user': 'Welcome, {username}!',
                
                // Footer
                'footer_description': 'Your personal knowledge hub for discovering and organizing what matters.',
                'quick_links': 'Quick Links',
                'home': 'Home',
                'extension': 'Extension',
                'features': 'Features',
                'beta': 'Beta',
                'contact': 'Contact',
                'get_in_touch': 'Get in Touch',
                'privacy': 'Privacy',
                'terms': 'Terms',
                'all_rights_reserved': 'All rights reserved.',
                
                // Index page
                'hero_title': 'All Your Knowledge, One Private Space',
                'hero_subtitle': '‚Äî Your Second Brain with Quest ‚Äî',
                'hero_description': 'Quest Private Space helps you capture fragmented notes, files, ideas, and turns them into modular, structured, and retrievable knowledge.',
                'signup_cta': 'Sign up ‚Äî It\'s Free!',
                'extension_title': 'Save Anything, Anywhere ‚Äî With One Click.',
                'extension_description': 'Quest\'s browser extension makes remembering effortless. Whether it\'s a lecture video, research article, or random inspiration, capture it instantly into your private space. No more scattered notes ‚Äî just a unified, searchable context layer built for you.',
                'add_to_chrome': 'Add to Chrome',
                'key_features': 'Key Features',
                'features_subtitle': 'Your knowledge journey from capture to insights',
                'log_in': 'Log In',
                'sign_up': 'Sign Up',
                
                // Feature pipeline
                'capture': 'Capture',
                'one_click_save': 'One-Click Save',
                'capture_description': 'Save anything instantly ‚Äî web pages, notes, or media ‚Äî into your vault with just one click. No friction, no clutter.',
                'organize': 'Organize',
                'para_structured': 'PARA Structured Space',
                'organize_description': 'Your content is automatically organized into the PARA framework (Projects, Areas, Resources, Archives), giving you clarity from day one.',
                'manage': 'Manage',
                'build_your_space': 'Build Your Space',
                'manage_description': 'Easily create custom stacks, delete items, or classify articles ‚Äî full control to keep your second brain tidy and personal.',
                'summarize': 'Summarize',
                'ai_insights': 'AI-Powered Insights',
                'summarize_description': 'Each stack comes with an AI-generated summary, helping you distill key takeaways without rereading everything.',
                'reflect': 'Reflect',
                'weekly_insights': 'Weekly Insights',
                'reflect_description': 'Get a personalized email digest of your saved content plus curated content cards ‚Äî keeping you in sync with your own knowledge growth.',
                'retrieve': 'Retrieve',
                'chat_discover': 'Chat & Discover',
                'retrieve_description': 'Find anything fast and (optionally) chat with it ‚Äî a natural bridge to your Knowledge Bot beta.',
                
                // Beta section
                'beta_features': 'Beta Features',
                'beta_description': 'Talk directly to your AI chatbot trained on your saved content. Retrieve notes, recall articles, and spark insights ‚Äî all in conversation.',
                'try_beta': 'Try the Beta',
                
                // Contact section
                'talk_to_team': 'Talk to Our Team',
                'contact_description': 'Have questions about Quest? We\'d love to hear from you.',
                'send_email': 'üìß Send Email',
                
                // Navigation (for dynamic content)
                'home': 'HOME',
                'extension': 'EXTENSION',
                'features': 'FEATURES',
                'beta': 'BETA',
                'contact': 'CONTACT',
                'go_to_my_space': 'Go to My Space',
                
                // Pagination
                'previous': 'Previous',
                'next': 'Next',
                'page': 'Page',
                'of': 'of',
                'insights_total': 'insights total',
                'cards': 'cards',
                'insights': 'insights',
                'stack': 'stack',
                'stacks': 'stacks',
                
                // Login page
                'welcome_back': 'Welcome Back!',
                'login_subtitle': 'Log in to your Quest space',
                'email_label': 'Email/Account Number',
                'email_placeholder': 'Registered Email / Account Number',
                'password_label': 'Password',
                'password_placeholder': 'Password',
                'forgot_password': 'Forgot Password?',
                'no_account': 'Don\'t have an account?',
                'reset_password': 'Reset Password',
                'reset_email_placeholder': 'Enter your email address',
                'send_reset_link': 'Send Reset Link',
                
                // Signup page
                'create_account': 'Create Your Account',
                'signup_subtitle': 'Join Quest and start your knowledge journey',
                'email_address': 'Email Address',
                'nickname': 'Nickname',
                'nickname_placeholder': 'Choose a nickname (2-20 characters)',
                'password_requirements': 'Password Requirements:',
                'password_req_1': 'At least 8 characters long',
                'password_req_2': 'Must contain both letters and numbers',
                'password_req_3': 'Special characters are recommended for better security',
                'confirm_password': 'Confirm Password',
                'confirm_password_placeholder': 'Re-enter your password',
                'agree_terms': 'I agree to the Terms of Service and Privacy Policy',
                'terms_of_service': 'Terms of Service',
                'privacy_policy': 'Privacy Policy',
                'create_account_btn': 'Create Account',
                'already_have_account': 'Already have an account?',
                'login_now': 'Login Now',
                
                // Privacy and Terms pages
                'last_updated': 'Last updated: December 2024',
                'privacy_intro': '1. Introduction',
                'privacy_intro_text': 'Welcome to Quest ("we," "our," or "us"). This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our web application and related services.',
                'privacy_info_collect': '2. Information We Collect',
                'privacy_personal_info': '2.1 Personal Information',
                'privacy_personal_info_text': 'We may collect the following personal information:',
                'terms_acceptance': '1. Acceptance of Terms',
                'terms_acceptance_text': 'By accessing and using Quest ("the Service"), you accept and agree to be bound by the terms and provision of this agreement. If you do not agree to abide by the above, please do not use this service.',
                'back_to_previous': '‚Üê Back to Previous Page',
                
                // Email Preferences
                'manage_weekly_digest': 'Manage your weekly digest and delivery settings',
                'weekly_digest': 'Weekly Digest',
                'enable_weekly_digest': 'Enable weekly digest emails',
                'receive_weekly_summary': 'Receive a weekly summary of your insights and activity',
                'delivery_schedule': 'Delivery Schedule',
                'preferred_day': 'Preferred Day',
                'preferred_hour': 'Preferred Hour',
                'timezone': 'Timezone',
                'your_timezone': 'Your Timezone',
                'timezone_help': 'We\'ll send your digest at your preferred time in this timezone',
                'no_activity_policy': 'No Activity Policy',
                'no_activity_label': 'When you have no activity this week',
                'skip_sending': 'Skip sending (don\'t send email)',
                'brief_email': 'Send brief email with suggestions',
                'missed_content': 'Send email with "what you missed" content',
                'no_activity_help': 'Choose how to handle weeks when you haven\'t added any insights',
                'save_preferences': 'Save Preferences',
                'preview_digest': 'Preview Digest',
                'send_test_email': 'Send Test Email',
                'about_digest': 'About Your Digest',
                'weekly_summary': 'Weekly Summary: Get a curated overview of your insights from the past week',
                'personalized_content': 'Personalized Content: Highlights are chosen based on your engagement and recency',
                'stack_updates': 'Stack Updates: See what\'s new in your knowledge stacks',
                'smart_suggestions': 'Smart Suggestions: Get recommendations to improve your knowledge management',
                'privacy_first': 'Privacy First: Your data stays private and secure',
                'unsubscribe': 'Unsubscribe',
                'unsubscribe_help': 'You can unsubscribe at any time by:',
                'unsubscribe_link': 'Using the unsubscribe link in any digest email',
                'disable_option': 'Disabling the weekly digest option above',
                'contact_support': 'Contacting support at support@quest.example.com',
                
                // Days
                'sunday': 'Sunday',
                'monday': 'Monday',
                'tuesday': 'Tuesday',
                'wednesday': 'Wednesday',
                'thursday': 'Thursday',
                'friday': 'Friday',
                'saturday': 'Saturday',
                
                // Time zones
                'pacific_time': 'Pacific Time (Los Angeles)',
                'mountain_time': 'Mountain Time (Denver)',
                'central_time': 'Central Time (Chicago)',
                'eastern_time': 'Eastern Time (New York)',
                'london_gmt': 'London (GMT)',
                'paris_cet': 'Paris (CET)',
                'tokyo_jst': 'Tokyo (JST)',
                'shanghai_cst': 'Shanghai (CST)',
                'sydney_aest': 'Sydney (AEST)',
                'utc': 'UTC'
            },
            zh: {
                // Navigation
                'demo_chat': 'ÊºîÁ§∫ËÅäÂ§©',
                'language': '‰∏≠Êñá',
                'my_space': 'ÊàëÁöÑÁ©∫Èó¥',
                'email_preferences': 'ÈÇÆ‰ª∂ÂÅèÂ•ΩËÆæÁΩÆ',
                'edit_profile': 'ÁºñËæëËµÑÊñô',
                'log_out': 'ÈÄÄÂá∫ÁôªÂΩï',
                
                // My Space specific
                'search_insights': 'ÊêúÁ¥¢ËßÅËß£‚Ä¶',
                'edit': 'ÁºñËæë',
                'last_added': 'ÊúÄËøëÊ∑ªÂä†',
                'tags': 'Ê†áÁ≠æ',
                'all_tags': 'ÊâÄÊúâÊ†áÁ≠æ',
                'project': 'È°πÁõÆ',
                'area': 'È¢ÜÂüü',
                'resource': 'ËµÑÊ∫ê',
                'archive': 'ÂΩíÊ°£',
                'latest': 'ÊúÄÊñ∞',
                'oldest': 'ÊúÄÊóß',
                'alphabetical': 'Â≠óÊØçÈ°∫Â∫è',
                'new_stack': 'Êñ∞Â†ÜÊ†à',
                'new_stack_description': 'Áî®‰∫éÁªÑÁªáÂÜÖÂÆπÁöÑÊñ∞Â†ÜÊ†à',
                'stack': 'Â†ÜÊ†à',
                'items': 'È°π',
                'insights': 'ËßÅËß£',
                'no_insights_yet': 'ÊöÇÊó†ËßÅËß£',
                'stack_is_empty': 'Ëøô‰∏™Â†ÜÊ†àÊòØÁ©∫ÁöÑ„ÄÇÊ∑ªÂä†‰∏Ä‰∫õËßÅËß£ÂºÄÂßãÂêßÔºÅ',
                'add_insight': 'Ê∑ªÂä†ËßÅËß£',
                'back_to_my_space': 'ËøîÂõûÊàëÁöÑÁ©∫Èó¥',
                'no_content_collected': 'Â∞öÊú™Êî∂ÈõÜ‰ªª‰ΩïÂÜÖÂÆπ',
                'start_adding_content': 'ÂºÄÂßãÊ∑ªÂä†ÊÇ®ÂñúÊ¨¢ÁöÑÂ™í‰ΩìÂÜÖÂÆπÂà∞ÊÇ®ÁöÑÊî∂Ëóè‰∏≠',
                'add_content': 'Ê∑ªÂä†ÂÜÖÂÆπ',
                'created': 'ÂàõÂª∫‰∫é',
                'modified': '‰øÆÊîπ‰∫é',
                
                // Modal translations
                'add_new_content': 'Ê∑ªÂä†Êñ∞ÂÜÖÂÆπ',
                'content_url': 'ÂÜÖÂÆπÈìæÊé•',
                'custom_title_optional': 'Ëá™ÂÆö‰πâÊ†áÈ¢òÔºàÂèØÈÄâÔºâ',
                'enter_custom_title_placeholder': 'ËæìÂÖ•Ëá™ÂÆö‰πâÊ†áÈ¢òÊàñÁïôÁ©∫‰ΩøÁî®ÁΩëÈ°µÊ†áÈ¢ò',
                'your_thoughts_optional': 'ÊÇ®ÁöÑÊÉ≥Ê≥ïÔºàÂèØÈÄâÔºâ',
                'share_thoughts_placeholder': 'ÂàÜ‰∫´ÊÇ®ÂØπÊ≠§ÂÜÖÂÆπÁöÑÊÉ≥Ê≥ï„ÄÅËßÅËß£ÊàñÁ¨îËÆ∞',
                'tag_optional': 'Ê†áÁ≠æÔºàÂèØÈÄâÔºâ',
                'select_tag_placeholder': 'ÈÄâÊã©Ê†áÁ≠æ...',
                'cancel': 'ÂèñÊ∂à',
                'add_content': 'Ê∑ªÂä†ÂÜÖÂÆπ',
                'add': 'Ê∑ªÂä†',
                'welcome': 'Ê¨¢Ëøé',
                'welcome_user': 'Ê¨¢ËøéÔºå{username}ÔºÅ',
                
                // Footer
                'footer_description': 'ÊÇ®ÁöÑ‰∏™‰∫∫Áü•ËØÜ‰∏≠ÂøÉÔºåÁî®‰∫éÂèëÁé∞ÂíåÁªÑÁªáÈáçË¶ÅÂÜÖÂÆπ„ÄÇ',
                'quick_links': 'Âø´ÈÄüÈìæÊé•',
                'home': 'È¶ñÈ°µ',
                'extension': 'Êâ©Â±ï',
                'features': 'ÂäüËÉΩ',
                'beta': 'ÊµãËØïÁâà',
                'contact': 'ËÅîÁ≥ª',
                'get_in_touch': 'ËÅîÁ≥ªÊàë‰ª¨',
                'privacy': 'ÈöêÁßÅ',
                'terms': 'Êù°Ê¨æ',
                'all_rights_reserved': 'ÁâàÊùÉÊâÄÊúâ„ÄÇ',
                
                // Index page
                'hero_title': 'ÊâÄÊúâÁü•ËØÜÔºå‰∏Ä‰∏™ÁßÅ‰∫∫Á©∫Èó¥',
                'hero_subtitle': '‚Äî ÊÇ®ÁöÑÁ¨¨‰∫åÂ§ßËÑëÔºåQuest ‚Äî',
                'hero_description': 'Quest ÁßÅ‰∫∫Á©∫Èó¥Â∏ÆÂä©ÊÇ®ÊçïËé∑Èõ∂Êï£ÁöÑÁ¨îËÆ∞„ÄÅÊñá‰ª∂ÂíåÊÉ≥Ê≥ïÔºåÂπ∂Â∞ÜÂÆÉ‰ª¨ËΩ¨Âåñ‰∏∫Ê®°ÂùóÂåñ„ÄÅÁªìÊûÑÂåñ‰∏îÂèØÊ£ÄÁ¥¢ÁöÑÁü•ËØÜ„ÄÇ',
                'signup_cta': 'Á´ãÂç≥Ê≥®ÂÜå ‚Äî ÂÖçË¥πÔºÅ',
                'extension_title': '‰∏ÄÈîÆ‰øùÂ≠ò‰ªª‰ΩïÂÜÖÂÆπÔºå‰ªª‰ΩïÂú∞Êñπ„ÄÇ',
                'extension_description': 'Quest ÊµèËßàÂô®Êâ©Â±ïËÆ©ËÆ∞ÂøÜÂèòÂæóÊØ´‰∏çË¥πÂäõ„ÄÇÊó†ËÆ∫ÊòØËÆ≤Â∫ßËßÜÈ¢ë„ÄÅÁ†îÁ©∂ÊñáÁ´†ËøòÊòØÈöèÊú∫ÁÅµÊÑüÔºåÈÉΩËÉΩÁ´ãÂç≥ÊçïËé∑Âà∞ÊÇ®ÁöÑÁßÅ‰∫∫Á©∫Èó¥„ÄÇ‰∏çÂÜçÊúâÈõ∂Êï£ÁöÑÁ¨îËÆ∞‚Äî‚ÄîÂè™Êúâ‰∏∫ÊÇ®ÊûÑÂª∫ÁöÑÁªü‰∏Ä„ÄÅÂèØÊêúÁ¥¢ÁöÑ‰∏ä‰∏ãÊñáÂ±Ç„ÄÇ',
                'add_to_chrome': 'Ê∑ªÂä†Âà∞ Chrome',
                'key_features': 'Ê†∏ÂøÉÂäüËÉΩ',
                'features_subtitle': '‰ªéÊçïËé∑Âà∞Ê¥ûÂØüÁöÑÁü•ËØÜ‰πãÊóÖ',
                'log_in': 'ÁôªÂΩï',
                'sign_up': 'Ê≥®ÂÜå',
                
                // Feature pipeline
                'capture': 'ÊçïËé∑',
                'one_click_save': '‰∏ÄÈîÆ‰øùÂ≠ò',
                'capture_description': '‰∏ÄÈîÆ‰øùÂ≠ò‰ªª‰ΩïÂÜÖÂÆπ‚Äî‚ÄîÁΩëÈ°µ„ÄÅÁ¨îËÆ∞ÊàñÂ™í‰Ωì‚Äî‚ÄîÂà∞ÊÇ®ÁöÑ‰øùÈô©Â∫ì„ÄÇÊó†Êë©Êì¶ÔºåÊó†Ê∑∑‰π±„ÄÇ',
                'organize': 'Êï¥ÁêÜ',
                'para_structured': 'PARAÁªìÊûÑÂåñÁ©∫Èó¥',
                'organize_description': 'ÊÇ®ÁöÑÂÜÖÂÆπ‰ºöËá™Âä®ÁªÑÁªáÂà∞PARAÊ°ÜÊû∂ÔºàÈ°πÁõÆ„ÄÅÈ¢ÜÂüü„ÄÅËµÑÊ∫ê„ÄÅÂΩíÊ°£Ôºâ‰∏≠Ôºå‰ªé‰∏ÄÂºÄÂßãÂ∞±ÁªôÊÇ®Ê∏ÖÊô∞ÁöÑÁªìÊûÑ„ÄÇ',
                'manage': 'ÁÆ°ÁêÜ',
                'build_your_space': 'ÊûÑÂª∫ÊÇ®ÁöÑÁ©∫Èó¥',
                'manage_description': 'ËΩªÊùæÂàõÂª∫Ëá™ÂÆö‰πâÂ†ÜÊ†à„ÄÅÂà†Èô§È°πÁõÆÊàñÂàÜÁ±ªÊñáÁ´†‚Äî‚ÄîÂÆåÂÖ®ÊéßÂà∂‰øùÊåÅÊÇ®ÁöÑÁ¨¨‰∫åÂ§ßËÑëÊï¥Ê¥ÅÂíå‰∏™‰∫∫Âåñ„ÄÇ',
                'summarize': 'ÊÄªÁªì',
                'ai_insights': 'AIÈ©±Âä®ÁöÑÊ¥ûÂØü',
                'summarize_description': 'ÊØè‰∏™Â†ÜÊ†àÈÉΩÈÖçÊúâAIÁîüÊàêÁöÑÊëòË¶ÅÔºåÂ∏ÆÂä©ÊÇ®ÊèêÁÇºÂÖ≥ÈîÆË¶ÅÁÇπËÄåÊó†ÈúÄÈáçÊñ∞ÈòÖËØªÊâÄÊúâÂÜÖÂÆπ„ÄÇ',
                'reflect': 'ÂèçÊÄù',
                'weekly_insights': 'ÊØèÂë®Ê¥ûÂØü',
                'reflect_description': 'Ëé∑ÂèñÊÇ®‰øùÂ≠òÂÜÖÂÆπÁöÑ‰∏™ÊÄßÂåñÈÇÆ‰ª∂ÊëòË¶Å‰ª•ÂèäÁ≤æÈÄâÂÜÖÂÆπÂç°Áâá‚Äî‚Äî‰∏éÊÇ®Ëá™Â∑±ÁöÑÁü•ËØÜÂ¢ûÈïø‰øùÊåÅÂêåÊ≠•„ÄÇ',
                'retrieve': 'Ê£ÄÁ¥¢',
                'chat_discover': 'ËÅäÂ§©‰∏éÂèëÁé∞',
                'retrieve_description': 'Âø´ÈÄüÊâæÂà∞‰ªª‰ΩïÂÜÖÂÆπÂπ∂ÂèØÈÄâÊã©‰∏éÂÖ∂ËÅäÂ§©‚Äî‚ÄîËøôÊòØÈÄöÂæÄÊÇ®Áü•ËØÜÊú∫Âô®‰∫∫ÊµãËØïÁâàÁöÑËá™ÁÑ∂Ê°•Ê¢Å„ÄÇ',
                
                // Beta section
                'beta_features': 'ÊµãËØïÁâàÂäüËÉΩ',
                'beta_description': 'Áõ¥Êé•‰∏éÂü∫‰∫éÊÇ®‰øùÂ≠òÂÜÖÂÆπËÆ≠ÁªÉÁöÑAIËÅäÂ§©Êú∫Âô®‰∫∫ÂØπËØù„ÄÇÊ£ÄÁ¥¢Á¨îËÆ∞„ÄÅÂõûÂøÜÊñáÁ´†„ÄÅÊøÄÂèëÊ¥ûÂØü‚Äî‚ÄîÂÖ®ÈÉ®ÈÄöËøáÂØπËØùÂÆåÊàê„ÄÇ',
                'try_beta': 'Â∞ùËØïÊµãËØïÁâà',
                
                // Contact section
                'talk_to_team': '‰∏éÊàë‰ª¨ÁöÑÂõ¢Èòü‰∫§ÊµÅ',
                'contact_description': 'ÂØπQuestÊúâÁñëÈóÆÔºüÊàë‰ª¨Âæà‰πêÊÑèÂê¨ÂèñÊÇ®ÁöÑÊÑèËßÅ„ÄÇ',
                'send_email': 'üìß ÂèëÈÄÅÈÇÆ‰ª∂',
                
                // Navigation (for dynamic content)
                'home': 'È¶ñÈ°µ',
                'extension': 'Êâ©Â±ï',
                'features': 'ÂäüËÉΩ',
                'beta': 'ÊµãËØïÁâà',
                'contact': 'ËÅîÁ≥ª',
                'go_to_my_space': 'ÂâçÂæÄÊàëÁöÑÁ©∫Èó¥',
                
                // Pagination
                'previous': '‰∏ä‰∏ÄÈ°µ',
                'next': '‰∏ã‰∏ÄÈ°µ',
                'page': 'Á¨¨',
                'of': 'È°µÔºåÂÖ±',
                'insights_total': '‰∏™ËßÅËß£',
                'cards': 'Âº†Âç°Áâá',
                'insights': '‰∏™ËßÅËß£',
                'stack': '‰∏™Â†ÜÊ†à',
                'stacks': '‰∏™Â†ÜÊ†à',
                
                // Login page
                'welcome_back': 'Ê¨¢ËøéÂõûÊù•ÔºÅ',
                'login_subtitle': 'ÁôªÂΩïÂà∞ÊÇ®ÁöÑ Quest Á©∫Èó¥',
                'email_label': 'ÈÇÆÁÆ±/Ë¥¶Âè∑',
                'email_placeholder': 'Ê≥®ÂÜåÈÇÆÁÆ± / Ë¥¶Âè∑',
                'password_label': 'ÂØÜÁ†Å',
                'password_placeholder': 'ÂØÜÁ†Å',
                'forgot_password': 'ÂøòËÆ∞ÂØÜÁ†ÅÔºü',
                'no_account': 'Ê≤°ÊúâË¥¶Âè∑Ôºü',
                'reset_password': 'ÈáçÁΩÆÂØÜÁ†Å',
                'reset_email_placeholder': 'ËæìÂÖ•ÊÇ®ÁöÑÈÇÆÁÆ±Âú∞ÂùÄ',
                'send_reset_link': 'ÂèëÈÄÅÈáçÁΩÆÈìæÊé•',
                
                // Signup page
                'create_account': 'ÂàõÂª∫ÊÇ®ÁöÑË¥¶Âè∑',
                'signup_subtitle': 'Âä†ÂÖ• QuestÔºåÂºÄÂßãÊÇ®ÁöÑÁü•ËØÜ‰πãÊóÖ',
                'email_address': 'ÈÇÆÁÆ±Âú∞ÂùÄ',
                'nickname': 'ÊòµÁß∞',
                'nickname_placeholder': 'ÈÄâÊã©‰∏Ä‰∏™ÊòµÁß∞Ôºà2-20‰∏™Â≠óÁ¨¶Ôºâ',
                'password_requirements': 'ÂØÜÁ†ÅË¶ÅÊ±ÇÔºö',
                'password_req_1': 'Ëá≥Â∞ë8‰∏™Â≠óÁ¨¶',
                'password_req_2': 'ÂøÖÈ°ªÂåÖÂê´Â≠óÊØçÂíåÊï∞Â≠ó',
                'password_req_3': 'Âª∫ËÆÆ‰ΩøÁî®ÁâπÊÆäÂ≠óÁ¨¶‰ª•ÊèêÈ´òÂÆâÂÖ®ÊÄß',
                'confirm_password': 'Á°ÆËÆ§ÂØÜÁ†Å',
                'confirm_password_placeholder': 'ÈáçÊñ∞ËæìÂÖ•ÊÇ®ÁöÑÂØÜÁ†Å',
                'agree_terms': 'ÊàëÂêåÊÑèÊúçÂä°Êù°Ê¨æÂíåÈöêÁßÅÊîøÁ≠ñ',
                'terms_of_service': 'ÊúçÂä°Êù°Ê¨æ',
                'privacy_policy': 'ÈöêÁßÅÊîøÁ≠ñ',
                'create_account_btn': 'ÂàõÂª∫Ë¥¶Âè∑',
                'already_have_account': 'Â∑≤ÊúâË¥¶Âè∑Ôºü',
                'login_now': 'Á´ãÂç≥ÁôªÂΩï',
                
                // Privacy and Terms pages
                'last_updated': 'ÊúÄÂêéÊõ¥Êñ∞Ôºö2024Âπ¥12Êúà',
                'privacy_intro': '1. ‰ªãÁªç',
                'privacy_intro_text': 'Ê¨¢Ëøé‰ΩøÁî® QuestÔºà"Êàë‰ª¨"„ÄÅ"Êàë‰ª¨ÁöÑ"Êàñ"Êàë‰ª¨"Ôºâ„ÄÇÊú¨ÈöêÁßÅÊîøÁ≠ñËß£Èáä‰∫ÜÂΩìÊÇ®‰ΩøÁî®Êàë‰ª¨ÁöÑÁΩëÁªúÂ∫îÁî®Á®ãÂ∫èÂíåÁõ∏ÂÖ≥ÊúçÂä°Êó∂ÔºåÊàë‰ª¨Â¶Ç‰ΩïÊî∂ÈõÜ„ÄÅ‰ΩøÁî®„ÄÅÊä´Èú≤Âíå‰øùÊä§ÊÇ®ÁöÑ‰ø°ÊÅØ„ÄÇ',
                'privacy_info_collect': '2. Êàë‰ª¨Êî∂ÈõÜÁöÑ‰ø°ÊÅØ',
                'privacy_personal_info': '2.1 ‰∏™‰∫∫‰ø°ÊÅØ',
                'privacy_personal_info_text': 'Êàë‰ª¨ÂèØËÉΩÊî∂ÈõÜ‰ª•‰∏ã‰∏™‰∫∫‰ø°ÊÅØÔºö',
                'terms_acceptance': '1. Êù°Ê¨æÊé•Âèó',
                'terms_acceptance_text': 'ÈÄöËøáËÆøÈóÆÂíå‰ΩøÁî® QuestÔºà"ÊúçÂä°"ÔºâÔºåÊÇ®Êé•ÂèóÂπ∂ÂêåÊÑèÂèóÊú¨ÂçèËÆÆÊù°Ê¨æÂíåËßÑÂÆöÁöÑÁ∫¶Êùü„ÄÇÂ¶ÇÊûúÊÇ®‰∏çÂêåÊÑèÈÅµÂÆà‰∏äËø∞Êù°Ê¨æÔºåËØ∑‰∏çË¶Å‰ΩøÁî®Ê≠§ÊúçÂä°„ÄÇ',
                'back_to_previous': '‚Üê ËøîÂõû‰∏ä‰∏ÄÈ°µ',
                
                // Email Preferences
                'manage_weekly_digest': 'ÁÆ°ÁêÜÊÇ®ÁöÑÊØèÂë®ÊëòË¶ÅÂíåÂèëÈÄÅËÆæÁΩÆ',
                'weekly_digest': 'ÊØèÂë®ÊëòË¶Å',
                'enable_weekly_digest': 'ÂêØÁî®ÊØèÂë®ÊëòË¶ÅÈÇÆ‰ª∂',
                'receive_weekly_summary': 'Êé•Êî∂ÊÇ®ËßÅËß£ÂíåÊ¥ªÂä®ÁöÑÊØèÂë®ÊëòË¶Å',
                'delivery_schedule': 'ÂèëÈÄÅÊó∂Èó¥Ë°®',
                'preferred_day': 'È¶ñÈÄâÊó•Êúü',
                'preferred_hour': 'È¶ñÈÄâÊó∂Èó¥',
                'timezone': 'Êó∂Âå∫',
                'your_timezone': 'ÊÇ®ÁöÑÊó∂Âå∫',
                'timezone_help': 'Êàë‰ª¨Â∞ÜÂú®ÊÇ®È¶ñÈÄâÁöÑÊó∂Âå∫Êó∂Èó¥ÂèëÈÄÅÊëòË¶Å',
                'no_activity_policy': 'Êó†Ê¥ªÂä®ÊîøÁ≠ñ',
                'no_activity_label': 'ÂΩìÊÇ®Êú¨Âë®Ê≤°ÊúâÊ¥ªÂä®Êó∂',
                'skip_sending': 'Ë∑≥ËøáÂèëÈÄÅÔºà‰∏çÂèëÈÄÅÈÇÆ‰ª∂Ôºâ',
                'brief_email': 'ÂèëÈÄÅÂåÖÂê´Âª∫ËÆÆÁöÑÁÆÄÁü≠ÈÇÆ‰ª∂',
                'missed_content': 'ÂèëÈÄÅÂåÖÂê´"ÊÇ®ÈîôËøáÁöÑÂÜÖÂÆπ"ÁöÑÈÇÆ‰ª∂',
                'no_activity_help': 'ÈÄâÊã©Â¶Ç‰ΩïÂ§ÑÁêÜÊÇ®Ê≤°ÊúâÊ∑ªÂä†‰ªª‰ΩïËßÅËß£ÁöÑÂë®',
                'save_preferences': '‰øùÂ≠òËÆæÁΩÆ',
                'preview_digest': 'È¢ÑËßàÊëòË¶Å',
                'send_test_email': 'ÂèëÈÄÅÊµãËØïÈÇÆ‰ª∂',
                'about_digest': 'ÂÖ≥‰∫éÊÇ®ÁöÑÊëòË¶Å',
                'weekly_summary': 'ÊØèÂë®ÊëòË¶ÅÔºöËé∑ÂèñËøáÂéª‰∏ÄÂë®ËßÅËß£ÁöÑÁ≤æÈÄâÊ¶ÇËßà',
                'personalized_content': '‰∏™ÊÄßÂåñÂÜÖÂÆπÔºöÊ†πÊçÆÊÇ®ÁöÑÂèÇ‰∏éÂ∫¶ÂíåÊó∂ÊïàÊÄßÈÄâÊã©‰∫ÆÁÇπ',
                'stack_updates': 'Â†ÜÊ†àÊõ¥Êñ∞ÔºöÊü•ÁúãÊÇ®Áü•ËØÜÂ†ÜÊ†à‰∏≠ÁöÑÊñ∞ÂÜÖÂÆπ',
                'smart_suggestions': 'Êô∫ËÉΩÂª∫ËÆÆÔºöËé∑ÂèñÊîπÂñÑÁü•ËØÜÁÆ°ÁêÜÁöÑÂª∫ËÆÆ',
                'privacy_first': 'ÈöêÁßÅ‰ºòÂÖàÔºöÊÇ®ÁöÑÊï∞ÊçÆ‰øùÊåÅÁßÅÂØÜÂíåÂÆâÂÖ®',
                'unsubscribe': 'ÂèñÊ∂àËÆ¢ÈòÖ',
                'unsubscribe_help': 'ÊÇ®ÂèØ‰ª•ÈöèÊó∂ÈÄöËøá‰ª•‰∏ãÊñπÂºèÂèñÊ∂àËÆ¢ÈòÖÔºö',
                'unsubscribe_link': '‰ΩøÁî®‰ªª‰ΩïÊëòË¶ÅÈÇÆ‰ª∂‰∏≠ÁöÑÂèñÊ∂àËÆ¢ÈòÖÈìæÊé•',
                'disable_option': 'Á¶ÅÁî®‰∏äÈù¢ÁöÑÊØèÂë®ÊëòË¶ÅÈÄâÈ°π',
                'contact_support': 'ËÅîÁ≥ªÊîØÊåÅ support@quest.example.com',
                
                // Days
                'sunday': 'ÊòüÊúüÊó•',
                'monday': 'ÊòüÊúü‰∏Ä',
                'tuesday': 'ÊòüÊúü‰∫å',
                'wednesday': 'ÊòüÊúü‰∏â',
                'thursday': 'ÊòüÊúüÂõõ',
                'friday': 'ÊòüÊúü‰∫î',
                'saturday': 'ÊòüÊúüÂÖ≠',
                
                // Time zones
                'pacific_time': 'Â§™Âπ≥Ê¥ãÊó∂Èó¥ÔºàÊ¥õÊùâÁü∂Ôºâ',
                'mountain_time': 'Â±±Âú∞Êó∂Èó¥Ôºà‰∏π‰ΩõÔºâ',
                'central_time': '‰∏≠ÈÉ®Êó∂Èó¥ÔºàËäùÂä†Âì•Ôºâ',
                'eastern_time': '‰∏úÈÉ®Êó∂Èó¥ÔºàÁ∫ΩÁ∫¶Ôºâ',
                'london_gmt': '‰º¶Êï¶ÔºàGMTÔºâ',
                'paris_cet': 'Â∑¥ÈªéÔºàCETÔºâ',
                'tokyo_jst': '‰∏ú‰∫¨ÔºàJSTÔºâ',
                'shanghai_cst': '‰∏äÊµ∑ÔºàCSTÔºâ',
                'sydney_aest': 'ÊÇâÂ∞ºÔºàAESTÔºâ',
                'utc': 'UTC'
            }
        };
        
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.applyTranslations();
        this.updateLanguageButton();
    }

    setupEventListeners() {
        // Translation toggle button
        const toggleBtn = document.getElementById('translationToggle');
        if (toggleBtn && !toggleBtn.hasAttribute('data-listener-attached')) {
            toggleBtn.addEventListener('click', () => this.toggleLanguage());
            toggleBtn.setAttribute('data-listener-attached', 'true');
        }
    }

    toggleLanguage() {
        this.currentLanguage = this.currentLanguage === 'en' ? 'zh' : 'en';
        localStorage.setItem('quest_language', this.currentLanguage);
        this.applyTranslations();
        this.updateLanguageButton();
    }

    applyTranslations() {
        // Find all elements with data-translate attribute
        const elements = document.querySelectorAll('[data-translate]');
        
        elements.forEach(element => {
            const key = element.getAttribute('data-translate');
            const translation = this.translations[this.currentLanguage][key];
            
            if (translation) {
                // Handle special case for welcome text with username
                if (key === 'welcome_user') {
                    const username = element.getAttribute('data-username') || 'User';
                    element.textContent = translation.replace('{username}', username);
                } else {
                    element.textContent = translation;
                }
            }
        });

        // Handle placeholder attributes
        const placeholderElements = document.querySelectorAll('[data-translate-placeholder]');
        placeholderElements.forEach(element => {
            const key = element.getAttribute('data-translate-placeholder');
            const translation = this.translations[this.currentLanguage][key];
            
            if (translation) {
                element.placeholder = translation;
            }
        });

        // Update page title based on current page
        const isEmailPrefs = window.location.pathname.includes('email-preferences');
        if (isEmailPrefs) {
            document.title = this.currentLanguage === 'zh' ? 'ÈÇÆ‰ª∂ÂÅèÂ•ΩËÆæÁΩÆ - Quest' : 'Email Preferences - Quest';
        } else {
            document.title = this.currentLanguage === 'zh' ? 'ÊàëÁöÑÁ©∫Èó¥ - Quest' : 'My Space - Quest';
        }
        
        // Update body class for CSS adjustments
        document.body.className = document.body.className.replace(/language-\w+/g, '');
        document.body.classList.add(`language-${this.currentLanguage}`);
        
        // Update dynamic content that uses translation system
        this.updateDynamicContent();
    }

    updateLanguageButton() {
        const toggleBtn = document.getElementById('translationToggle');
        if (toggleBtn) {
            const flag = toggleBtn.querySelector('.translation-flag');
            const text = toggleBtn.querySelector('.translation-text');
            
            if (this.currentLanguage === 'zh') {
                flag.textContent = 'üá®üá≥';
                text.textContent = '‰∏≠Êñá';
            } else {
                flag.textContent = 'üåê';
                text.textContent = 'EN';
            }
        }
    }

    // Helper method to get translation for JavaScript-generated content
    t(key) {
        return this.translations[this.currentLanguage][key] || key;
    }
    
    // Update dynamic content that uses translation system
    updateDynamicContent() {
        // Update pagination info if it exists
        if (typeof updatePaginationUI === 'function') {
            updatePaginationUI();
        }
        
        // Update filter buttons if they exist and have translation attributes
        const filterButtons = document.querySelectorAll('.filter-label[data-translate]');
        filterButtons.forEach(button => {
            const key = button.getAttribute('data-translate');
            const translation = this.translations[this.currentLanguage][key];
            if (translation) {
                button.textContent = translation;
            }
        });
        
        // Update stack item counts
        const itemCountElements = document.querySelectorAll('.content-card-source-name, .stack-count');
        itemCountElements.forEach(element => {
            const text = element.textContent;
            if (text.includes(' items')) {
                const count = text.match(/(\d+)/)?.[1];
                if (count) {
                    const itemsText = this.translations[this.currentLanguage]['items'];
                    element.textContent = `${count} ${itemsText}`;
                }
            }
        });
        
        // Update stack names and descriptions
        const stackTitles = document.querySelectorAll('.content-card-title, .stack-name-horizontal, .stack-name, #stackBreadcrumbName');
        stackTitles.forEach(title => {
            const originalText = title.textContent;
            if (originalText === 'New Stack' || originalText === 'Êñ∞Â†ÜÊ†à') {
                title.textContent = this.translations[this.currentLanguage]['new_stack'];
            }
        });
        
        const stackDescriptions = document.querySelectorAll('.stack-description .description-text');
        stackDescriptions.forEach(description => {
            const originalText = description.textContent;
            if (originalText === 'A new stack for organizing content' || originalText === 'Áî®‰∫éÁªÑÁªáÂÜÖÂÆπÁöÑÊñ∞Â†ÜÊ†à') {
                description.textContent = this.translations[this.currentLanguage]['new_stack_description'];
            }
        });
        
        // Update stack context bar insights count
        const stackCountElements = document.querySelectorAll('#stackCount');
        stackCountElements.forEach(element => {
            const text = element.textContent;
            if (text.includes(' insights') || text.includes(' ËßÅËß£')) {
                const count = text.match(/(\d+)/)?.[1];
                if (count) {
                    const insightsText = this.translations[this.currentLanguage]['insights'];
                    element.textContent = `${count} ${insightsText}`;
                }
            }
        });
        
        // Update stack context bar dates
        const stackDatesElements = document.querySelectorAll('#stackDates');
        stackDatesElements.forEach(element => {
            let text = element.textContent;
            // Only update if the text doesn't match the current language
            const currentCreatedText = this.translations[this.currentLanguage]['created'];
            const currentModifiedText = this.translations[this.currentLanguage]['modified'];
            
            // Check if text needs updating - only if it contains text from the opposite language
            const hasEnglishText = text.includes('Created') || text.includes('Modified');
            const hasChineseText = text.includes('ÂàõÂª∫‰∫é') || text.includes('‰øÆÊîπ‰∫é');
            
            if ((this.currentLanguage === 'zh' && hasEnglishText) || 
                (this.currentLanguage === 'en' && hasChineseText)) {
                // Replace both English and Chinese versions with the current language
                text = text.replace(/Created/g, currentCreatedText)
                          .replace(/ÂàõÂª∫‰∫é/g, currentCreatedText)
                          .replace(/Modified/g, currentModifiedText)
                          .replace(/‰øÆÊîπ‰∫é/g, currentModifiedText);
                element.textContent = text;
            }
        });
        
        // Update empty stack state elements
        const emptyStackTitles = document.querySelectorAll('.empty-stack-state h3');
        emptyStackTitles.forEach(title => {
            const originalText = title.textContent;
            if (originalText === 'No insights yet' || originalText === 'ÊöÇÊó†ËßÅËß£') {
                title.textContent = this.translations[this.currentLanguage]['no_insights_yet'];
            }
        });
        
        const emptyStackDescriptions = document.querySelectorAll('.empty-stack-state p');
        emptyStackDescriptions.forEach(description => {
            const originalText = description.textContent;
            if (originalText === 'This stack is empty. Add some insights to get started!' || originalText === 'Ëøô‰∏™Â†ÜÊ†àÊòØÁ©∫ÁöÑ„ÄÇÊ∑ªÂä†‰∏Ä‰∫õËßÅËß£ÂºÄÂßãÂêßÔºÅ') {
                description.textContent = this.translations[this.currentLanguage]['stack_is_empty'];
            }
        });
        
        const addInsightButtons = document.querySelectorAll('#emptyStackAddInsightBtn');
        addInsightButtons.forEach(button => {
            const originalText = button.textContent.trim();
            if (originalText === 'Add Insight' || originalText === 'Ê∑ªÂä†ËßÅËß£') {
                button.innerHTML = button.innerHTML.replace(originalText, this.translations[this.currentLanguage]['add_insight']);
            }
        });
        
        const backToHomeButtons = document.querySelectorAll('#emptyStackBackToHomeBtn');
        backToHomeButtons.forEach(button => {
            const originalText = button.textContent.trim();
            if (originalText === 'Back to My Space' || originalText === 'ËøîÂõûÊàëÁöÑÁ©∫Èó¥') {
                button.innerHTML = button.innerHTML.replace(originalText, this.translations[this.currentLanguage]['back_to_my_space']);
            }
        });
        
        // Update general empty state elements
        const emptyStateTitles = document.querySelectorAll('.empty-state h3');
        emptyStateTitles.forEach(title => {
            const originalText = title.textContent;
            if (originalText === 'No content collected yet' || originalText === 'Â∞öÊú™Êî∂ÈõÜ‰ªª‰ΩïÂÜÖÂÆπ') {
                title.textContent = this.translations[this.currentLanguage]['no_content_collected'];
            }
        });
        
        const emptyStateDescriptions = document.querySelectorAll('.empty-state p');
        emptyStateDescriptions.forEach(description => {
            const originalText = description.textContent;
            if (originalText === 'Start adding your favorite media content to your collection' || originalText === 'ÂºÄÂßãÊ∑ªÂä†ÊÇ®ÂñúÊ¨¢ÁöÑÂ™í‰ΩìÂÜÖÂÆπÂà∞ÊÇ®ÁöÑÊî∂Ëóè‰∏≠') {
                description.textContent = this.translations[this.currentLanguage]['start_adding_content'];
            }
        });
        
        const addContentButtons = document.querySelectorAll('.add-content-btn');
        addContentButtons.forEach(button => {
            const originalText = button.textContent.trim();
            if (originalText === 'Add Content' || originalText === 'Ê∑ªÂä†ÂÜÖÂÆπ') {
                button.textContent = this.translations[this.currentLanguage]['add_content'];
            }
        });
        
        // Update "Add" button in stack context bar
        const stackAddButtons = document.querySelectorAll('#stackAddBtn');
        stackAddButtons.forEach(button => {
            const originalText = button.textContent.trim();
            if (originalText === 'Add' || originalText === 'Ê∑ªÂä†') {
                button.textContent = this.translations[this.currentLanguage]['add'];
            }
        });
    }
}

// Initialize translation manager when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.translationManager = new TranslationManager();
});

// Export for use in other modules
export { TranslationManager };
